var _appUrl="https:/"+"/ai.boozang.com",_masterTabId,_masterUrl,_ctrlTabId,_frameIds={},_code,_bzEnvCode,_css,_status=_newStatus=0,_lastExeActionReq,_doingPopCtrl,_curTest,_data,_curAction,_shareData;

chrome.browserAction.setBadgeText({text: "ON"});
//open management page from extension icon!
chrome.browserAction.onClicked.addListener(function() {
  chrome.tabs.create({url: _appUrl}, function(tab) {});
});

/*Get Message from web page*/
chrome.runtime.onMessageExternal.addListener(function(_req, _sender, _callback) {
  //_console("background (web page): ",_req)
  //check whether the request from BZ pages. If not from BZ do nothing.
  if(!_req.bz){
    return;
  }
  //check whether the request from BZ client web page
  if(_req.twPage){
    if(_req.tab=="master"){
      _req.frameId=[0];
      chrome.tabs.sendMessage(_masterTabId, _req);
    }else{
      _req.frameId=[_sender.frameId];
      chrome.tabs.sendMessage(_ctrlTabId, _req);
    }
  //Master tab send dynamic code to background to forward to content
  }else if(_req.bzExeCode){
    _setCodeToContent(_req.bzExeCode);
  //Master send current status
  }else if(_req.status!==undefined){
    //master tab set status before start pop client win
    if(_req.status=="popwin-start"){
      _doingPopCtrl=1
    //master tab set status after end pop client win
    }else if(_req.status=="popwin-end"){
      _doingPopCtrl=0
    }else{
      _newStatus=_status=_req.status;
      if(_ctrlTabId){
        if(_req.data){
          _data=_req.data;
        }
        chrome.tabs.sendMessage(_ctrlTabId, {_newStatus:_newStatus,data:_req.data});
        _newStatus=0;
      }
    }
  }else if(_req.open){
    window.open(req.url,req.name,req.size);
  //Set BZ code mapping data to unecrypt code from https://ai.boozang.com
  }else if(_req.ecMap){
    ecMap=_req.ecMap;
  //Dynamic code from BZ master page
  }else if(_req.bzCode){
    _masterTabId=_sender.tab.id;
    _masterUrl=_sender.url;
    _code=_req.bzCode;
    _lastExeActionReq=0;
  //Set CSS file path from BZ master page
  }else if(_req.bzCss){
    _css=_req.bzCss;
  //Dynamic data from BZ master page
  }else if(_req.bzEnvCode){
    _bzEnvCode=_req.bzEnvCode;
  //check whether BZ client tab ready
  }else{
    //for request execution a BZ testing action
    if(_req.exeAction){
      _req.frameId=[0];
      _lastExeActionReq=_req;
      if(_req.exeAction.element){
        if(_req.exeAction.element[0].startsWith("$(BZ.TW.document.body)")){
        }else{
          _req.frameId=_getFrameIds(_req.exeAction.element[0]);
          _req.exeAction.element[0]="BZ.TW.document";
        }
        //co=_code
      }else if(_req.exeAction[ecMap.co]){
        //_req.exeAction.code._element
        var e=_req.exeAction[ecMap.co][ecMap.e];
        if(e){
          //_req.exeAction.code._element[0]._css
          e=e[0][ecMap.c];
          if(e && e[0].startsWith("IFRAME:")){
            _req.frameId=_getFrameIds(e[0]);
            _req.exeAction[ecMap.co][ecMap.e].shift()
          }
        }
      }
    //for request highlight a BZ action element
    }else if(_req.element!==undefined){
      _req.frameId=[0];
      if(_req.element){
        if(_req.element[0].startsWith("$(BZ.TW.document.body)")){
        }else{
          _req.frameId=_getFrameIds(_req.element[0]);
          _req.element[0]="BZ.TW.document";
        }
      }
    }else if(_req.curTest){
      _curTest=_req.curTest
      if(_req.curAction){
        _curAction=_req.curAction;
      }
    }else if(_req.shareData){
      _shareData=_req.shareData;
      if(_ctrlTabId){
        chrome.tabs.sendMessage(_ctrlTabId,{shareData:_shareData});
      }
    }
    if(_ctrlTabId){
      chrome.tabs.sendMessage(_ctrlTabId, _req);
    }
  }
});

//to get frame ids by element path
function _getFrameIds(_root){
  var ids=[];
  var id=0
  if(_root!=="BZ.TW.document"){
    for(k in _frameIds){
      id=k;
      if(_frameIds[k].path2 && _frameIds[k].path2.includes(_root)){
        ids.push(parseInt(k));
      }
    }
  }
  if(!ids.length){
    ids.push(id)
  }
  return ids;
}

//set code to chrome extension content
function _setCodeToContent(c,id){
  //for set dynamic code to current controled client tab, 
  if(_ctrlTabId){
    if(id!==undefined){
      chrome.tabs.executeScript(_ctrlTabId, {code: c,matchAboutBlank:true,frameId:id});
    }else{
      chrome.tabs.executeScript(_ctrlTabId, {code: c,matchAboutBlank:true,allFrames:true});
    }
  }
}

//get message from extension content
chrome.runtime.onMessage.addListener(function(_msg, t, _sendResponse) {
  //_console("background (content): ",_msg)
  //For register tab, it only work for new pop window. The new window must pop up from master window.
  if(_msg._registerTab && _ctrlTabId==t.tab.id){
    if(t.url.startsWith(_appUrl)){
      return alert("Not support to test on the website!");
    }
    if(t.frameId && !_frameIds[t.frameId]){
      _frameIds[t.frameId]={url:t.url,id:t.frameId};
      var v={getFramePath:_frameIds};
      chrome.tabs.executeScript(
        _ctrlTabId,
        {frameId: t.frameId, code:"if(window.BZ){BZ.retrieveWinSize()}"},
        function(data) { 
          _frameIds[t.frameId].size=data[0] 
          setTimeout(function(){
            chrome.tabs.sendMessage(_ctrlTabId, v, function(m){
              if(m){
                _frameIds=m;
              }
            });
          },200);
        }
      );
    }
//    chrome.tabs.sendMessage(_masterTabId, {tw:-1});
    //Debugging flag, if the current content doesn't have dynamica code, set the master code to it.
    if(!_msg.BZ){
      _setCodeToContent(_code,t.frameId);
    }else{
      //for BZ developer debugging in BZ office
      if(_masterUrl.includes("boozang")){
        alert("The extension is not for production")
      }
      _setCodeToContent("showCode('BZ Debugging');",t.frameId);
    }
    _setCodeToContent(_bzEnvCode+"BZ.iframeId="+t.frameId+";",t.frameId);
    _sendResponse({_css:_css,_newStatus:_newStatus||_status,_status:_status,data:_data});
    if(_curAction){
      chrome.tabs.sendMessage(_ctrlTabId,{curAction:_curAction});
    }else if(_curTest){
      chrome.tabs.sendMessage(_ctrlTabId,{curTest:_curTest});
    }
    if(_shareData){
      chrome.tabs.sendMessage(_ctrlTabId,{shareData:_shareData});
    }

    if(_lastExeActionReq && _status=="play"){
      chrome.tabs.sendMessage(_ctrlTabId, _lastExeActionReq);
    }
  }else if(_msg.keep){
    return;
  //only work after master window is ready, and the requestion will send to master
  }else if(_masterTabId){
    _msg.ctrlInfo=1;
    if(_msg.result){
      _lastExeActionReq=0;
    }else if(_msg.action){
      if(t.frameId){
        _msg.action.element[0]=_frameIds[t.frameId].path;
      }
    }else if(_msg._updateAction){
      if(t.frameId){
        //_msg._updateAction.element[0]=_frameIds[t.frameId].path;
        _msg[ecMap.ua].element[0]=_frameIds[t.frameId].path;
      }
      _setCodeToContent("BZ."+ecMap.dp+"."+ecMap.er+"()")
    }else if(_msg[ecMap.f]==ecMap.rca){
      if(t.frameId){
        if(_msg[ecMap.d][ecMap.a].element){
          _msg[ecMap.d][ecMap.a].element[0]=_frameIds[t.frameId].path;
        }
      }
    }
    
    chrome.tabs.sendMessage(_masterTabId, _msg);
  }
});

chrome.tabs.onRemoved.addListener(function(_tab, info) {
  //_console("background: remove tab")
  //clear data when master tab close
  _frameIds={}
  if(_masterTabId==_tab){
    //_console("background: remove master")
    _masterTabId=0;
    _ctrlTabId=0;
  //clear client info
  }else if(_ctrlTabId==_tab){
    //_console("background: remove ctrl")
    _ctrlTabId=0;
    chrome.tabs.sendMessage(_masterTabId, {tw:0});
  }
});

chrome.tabs.onCreated.addListener(function(_tab, info) {
  //_console("background add tab")
  //only register the poping up client win
  if(_doingPopCtrl){
    //_console("background add ctrl tab")
    if(_ctrlTabId && _ctrlTabId!=_tab.id){
      chrome.tabs.sendMessage(_ctrlTabId, {close:1})
    }
    _ctrlTabId=_tab.id;
    _frameIds={};
    //to tell master the current client tab id
    chrome.tabs.sendMessage(_masterTabId, {tw:_ctrlTabId});
  }
});

chrome.tabs.onUpdated.addListener(function(_tab, info) {
  if(_masterTabId && _ctrlTabId==_tab){
    if(info.status=="complete"){
      chrome.tabs.sendMessage(_ctrlTabId, {isActive:1},function(a,b,c){
        if(!a){
          chrome.tabs.sendMessage(_masterTabId, {ctrlInfo:1,ready:1,error:1})
        }
      });
    }
    chrome.tabs.sendMessage(_masterTabId, {twUpdate:1});
  }
})

var _console=function(msg,o){
  console.log(msg)
  if(o){
    console.log(o)
  }
}

chrome.runtime.onUpdateAvailable.addListener(function(details) {
  console.log("updating to version " + details.version);
  if(_masterTabId){
//    alert("Extension will be updated soon. After that, please refresh your Boozang IDE page! Thanks")
  }
  chrome.runtime.reload();
});

chrome.runtime.requestUpdateCheck(function(status) {
  if (status == "update_available") {
    console.log("update pending...");
  } else if (status == "no_update") {
    console.log("no update found");
  } else if (status == "throttled") {
    console.log("Oops, I'm asking too frequently - I need to back off.");
  }
});