var _appUrl="https:/"+"/ai.boozang.com",_masterTabId,_masterFrameId,_masterUrl,_ctrlTabId,_frameIds={},_plugInCode,_bzEnvCode,_css,_status=_newStatus=0,_lastExeActionReq,_doingPopCtrl,_curTest,_data,_curAction,_shareData={},_ctrlFrameId;
var _lastErrPage=0,_loadPageInfo,assignfirmeCall,ignoreReqs="",_topFrameId;
var _ignoreList=["https://vars.hotjar.com"]
chrome.browserAction.setBadgeText({text: chrome.runtime.getManifest().version=="1.2"?"TEST":"AI"});
//open management page from extension icon!
chrome.browserAction.onClicked.addListener(function() {
  chrome.tabs.create({url: _appUrl}, function(tab) {});
});

/*Get Message from web page*/
chrome.runtime.onMessageExternal.addListener(function(_req, _sender, _callback) {
  //_console("background (web page): ",_req)
  //check whether the request from BZ pages. If not from BZ do nothing.
  if(!_req.bz){
    return;
  }
  //check whether the request from BZ client web page
  if(_req.twPage){
    if(_req.tab=="master"){
//      _req.frameId=[0];
      delete _req.twPage
      _req.twPage2=1
      chrome.tabs.sendMessage(_masterTabId, _req);
    }else{
      _req.frameId=[_sender.frameId];
      chrome.tabs.sendMessage(_ctrlTabId, _req);
    }
  //Master tab send dynamic code to background to forward to content
  }else if(_req.bzExeCode){
    _setCodeToContent(_req.bzExeCode,_req.id);
  //Master send current status
  }else if(_req.status!==undefined){
    //master tab set status before start pop client win
    if(_req.status=="popwin-start"){
      _doingPopCtrl=1
    //master tab set status after end pop client win
    }else if(_req.status=="popwin-end"){
      _doingPopCtrl=0
    }else{
      _newStatus=_status=_req.status;
      if(_ctrlTabId){
        if(_req.data){
          _data=_req.data;
        }
        chrome.tabs.sendMessage(_ctrlTabId, {_newStatus:_newStatus,data:_req.data});
        _newStatus=0;
      }
    }
  }else if(_req.open){
    window.open(req.url,req.name,req.size);
  //Set BZ code mapping data to unecrypt code from https://ai.boozang.com
  }else if(_req.ecMap){
    ecMap=_req.ecMap;
  //Dynamic code from BZ master page
  }else if(_req.bzCode){
    _masterTabId=_sender.tab.id;
    _masterFrameId=_sender.frameId
    _masterUrl=_sender.url;
    _plugInCode=_req.bzCode;
    _lastExeActionReq=0;
    _shareData={}
    ignoreReqs="";
  //Set CSS file path from BZ master page
  }else if(_req.bzCss){
    _css=_req.bzCss;
  //Dynamic data from BZ master page
  }else if(_req.bzEnvCode){
    _bzEnvCode=_req.bzEnvCode;
  //check whether BZ client tab ready
  }else{
    //for request execution a BZ testing action
    if(_req.exeAction){
      _req.frameId=[_topFrameId];
      _lastExeActionReq=_req;
      if(_req.exeAction.element){
        _addFrameId(_req,_req.exeAction.element)
      }else if(_req.exeAction[ecMap.co]){
        //_req.exeAction.code._element
        var e=_req.exeAction[ecMap.co][ecMap.e];
        if(e){
          //_req.exeAction.code._element[0]._css
          e=e[0][ecMap.c];
          if(e && e[0].startsWith("IFRAME:")){
            _req.frameId=_getFrameIds(e[0]);
            _req.exeAction[ecMap.co][ecMap.e].shift()
          }
        }
      }
    //for request highlight a BZ action element
    }else if(_req.element!==undefined){
      _addFrameId(_req,_req.element)
    }else if(_req.data&&_req.data.element){
      _addFrameId(_req,_req.data.element)
    }else if(_req.curTest!==undefined){
      _curTest=_req.curTest
      if(_req.curAction!==undefined){
        _curAction=_req.curAction;
      }
    }else if(_req.shareData){
      for(var k in _req.shareData){
        _shareData[k]=_req.shareData[k];
      }
      if(_ctrlTabId){
        chrome.tabs.sendMessage(_ctrlTabId,{shareData:_req.shareData});
      }
    }
    if(!_ctrlTabId||_lastErrPage){
      if(_req.exeAction){
        if(_ctrlTabId){
          chrome.tabs.get(_ctrlTabId,function(o){
            chrome.tabs.sendMessage(_masterTabId, {scope:"commAdapter",fun:"crash",data:{url:o.url},twPage:1,tab:"master",bz:1});
          })
        }else{
          chrome.tabs.sendMessage(_masterTabId, {scope:"commAdapter",fun:"crash",twPage:1,tab:"master",bz:1});
        }
      }
    }else{
      chrome.tabs.sendMessage(_ctrlTabId, _req);
    }
  }
});
function _addFrameId(_req,_element){
  _req.frameId=[_topFrameId];
  if(_element && _element[0]){
    if(!_element[0].startsWith("$(BZ.TW.document.body)")){
      _req.frameId=_getFrameIds(_element[0]);
      _element[0]="BZ.TW.document";
    }
  }
}
//to get frame ids by element path
function _getFrameIds(_root){
  var ids=[],id=0,bk;
  if(_root!=="BZ.TW.document"){
    for(k in _frameIds){
      id=k;
      if(_frameIds[k].path2 && _frameIds[k].path2.includes(_root)){
        ids=[parseInt(k)];
      }else if(!_frameIds[k].path2){
        bk=parseInt(k)
      }
    }
  }else{
    return[_topFrameId||0]
  }
  if(!ids.length){
    if(bk){
      ids.push(parseInt(bk))
    }else{
      ids.push(parseInt(id))
    }
  }
  return ids;
}

//set code to chrome extension content
function _setCodeToContent(c,id){
  //for set dynamic code to current controled client tab, 
  if(_ctrlTabId && !_lastErrPage){
    try{
      if(id!==undefined){
        if(!id&&_topFrameId){
          id=_topFrameId
        }
        chrome.tabs.executeScript(_ctrlTabId, {code: c,matchAboutBlank:true,frameId:id});
      }else{
        chrome.tabs.executeScript(_ctrlTabId, {code: c,matchAboutBlank:true,allFrames:true});
      }
    }catch(e){}
  }
}
function isIgnoreFrame(v){
  for(var i=0;i<_ignoreList.length;i++){
    if(v.startsWith(_ignoreList[i])){
      return 1
    }
  }
}
//get message from extension content
chrome.runtime.onMessage.addListener(function(_msg, t, _sendResponse) {
  //_console("background (content): ",_msg)
  /*****************************************************************************************************
  //For REGISTER tab, it only work for new pop window. The new window must pop up from master window.
  *****************************************************************************************************/
  if(_msg.keep){
    return;
  }else if(_msg._registerTab && (_msg.name=="bz-client"||_ctrlTabId==t.tab.id)){
    if(_msg.name=="bz-client"){
      _ctrlTabId=t.tab.id;
      if(_ctrlTabId==_masterTabId){
        _ctrlFrameId=t.frameId
      }
      //to tell master the current client tab id
      chrome.tabs.sendMessage(_masterTabId, {tw:_ctrlTabId,topFrame:t.frameId,tab:"master"});
    }
    if(t.url.startsWith(_appUrl)){
      return alert("Testing on Boozang sites not supported!");
    }
    if(isIgnoreFrame(t.url)){
      return
    }
    _topFrameId=_msg.name=="bz-client"||_msg.name=="bz-manager"?t.frameId:_topFrameId
    if(t.frameId &&_msg.name!="bz-client" && !_frameIds[t.frameId]){
      clearTimeout(assignfirmeCall)
      _frameIds[t.frameId]={url:t.url,id:t.frameId};
      var v={getFramePath:_frameIds};
      chrome.tabs.executeScript(
        _ctrlTabId,
        {frameId: t.frameId, code:"if(window.BZ){BZ.retrieveWinSize()}"},
        function(data) { 
          _frameIds[t.frameId].size=data[0] 
          assignfirmeCall=setTimeout(function(){
            chrome.tabs.sendMessage(_ctrlTabId, v,function(m){
              if(m){
                for(var k in m){
                  if(_frameIds[k] && !m[k].size){
                    m[k].size=_frameIds[k].size
                  }
                  _frameIds[k]=m[k]
                }
              }
            });
          },200);
        }
      );
    }
//    chrome.tabs.sendMessage(_masterTabId, {tw:-1,tab:"master"});
    //Debugging flag, if the current content doesn't have dynamica code, set the master code to it.
    if(!_msg.BZ){
      _setCodeToContent(_plugInCode,t.frameId);
    }else{
      //for BZ developer debugging in BZ office
      if(_masterUrl.includes("boozang")){
        alert("The extension is not for production")
      }
      _setCodeToContent("showCode('BZ Debugging');",t.frameId);
    }
    _setCodeToContent(_bzEnvCode+";BZ.iframeId="+t.frameId+";BZ.topFrame="+(_msg.name=="bz-client"?1:0)+";window.onunload=function(){chrome.runtime.sendMessage({unloadFrame:1,id:BZ.iframeId})}",t.frameId);
    _sendResponse({_css:_css,_newStatus:_newStatus||_status,_status:_status,data:_data});
    if(_curAction){
      chrome.tabs.sendMessage(_ctrlTabId,{curAction:_curAction});
    }else if(_curTest){
      chrome.tabs.sendMessage(_ctrlTabId,{curTest:_curTest});
    }
    if(_shareData){
      chrome.tabs.sendMessage(_ctrlTabId,{shareData:_shareData});
    }

    if(_lastExeActionReq && _status=="play"){
      chrome.tabs.sendMessage(_ctrlTabId, _lastExeActionReq);
    }
    if(_loadPageInfo){
      chrome.tabs.sendMessage(_masterTabId, _loadPageInfo)
      _loadPageInfo=0
    }
  //only work after master window is ready, and the requestion will send to master
  }else if(_masterTabId){
    _msg.ctrlInfo=1;
    if(_msg.result){
      _lastExeActionReq=0;
    }else if(_msg.action){
      if(t.frameId&&_frameIds[t.frameId]){
        _msg.action.element[0]=_frameIds[t.frameId].path;
      }
    }else if(_msg[ecMap.ua]){
      if(t.frameId&&_frameIds[t.frameId]){
        //_msg._updateAction.element[0]=_frameIds[t.frameId].path;
        _msg[ecMap.ua].element[0]=_frameIds[t.frameId].path;
      }
      _setCodeToContent("if(window."+ecMap.dp+"){"+ecMap.dp+"."+ecMap.er+"()}")
    }else if(_msg[ecMap.f]==ecMap.rca){
      if(t.frameId&&_frameIds[t.frameId]){
        if(_msg[ecMap.d][ecMap.a].element){
          _msg[ecMap.d][ecMap.a].element[0]=_frameIds[t.frameId].path;
        }
      }
    }else if(_msg._fun==ecMap.pe){
      if(t.frameId&&_frameIds[t.frameId]){
        _msg[ecMap.d][0]=_frameIds[t.frameId].path
      }
    }else if(_msg._fun==ecMap.lnp){
      _frameIds={}
    }else if(_msg.unloadFrame){
      delete _frameIds[_msg.id]
    }
    _msg.tab="master"
    chrome.tabs.sendMessage(_masterTabId, _msg);
  }
});

chrome.tabs.onRemoved.addListener(function(_tab, info) {
  //_console("background: remove tab")
  //clear data when master tab close
  if(_masterTabId==_tab){
    //_console("background: remove master")
    cleanMaster()
  //clear client info
  }else if(_ctrlTabId==_tab){
    //_console("background: remove ctrl")
    _ctrlTabId=0;
    chrome.tabs.sendMessage(_masterTabId, {tw:0,tab:"master"});
  }else{
    delete _frameIds[_tab]
    return
  }
  
  _frameIds={}
});

chrome.tabs.onCreated.addListener(function(_tab, info) {
  //_console("background add tab")
  //only register the poping up client win
  if(_doingPopCtrl){
    //_console("background add ctrl tab")
    if(_ctrlTabId && _ctrlTabId!=_tab.id){
      chrome.tabs.sendMessage(_ctrlTabId, {close:1})
    }
    _ctrlTabId=_tab.id;
    _frameIds={};
    //to tell master the current client tab id
    chrome.tabs.sendMessage(_masterTabId, {tw:_ctrlTabId,tab:"master"});
  }
});

var _console=function(msg,o){
  console.log(msg)
  if(o){
    console.log(o)
  }
}

chrome.runtime.onUpdateAvailable.addListener(function(details) {
  console.log("updating to version " + details.version);

  chrome.runtime.reload();
});

chrome.runtime.requestUpdateCheck(function(status) {
  if (status == "update_available") {
    console.log("update pending...");
  } else if (status == "no_update") {
    console.log("no update found");
  } else if (status == "throttled") {
    console.log("Oops, I'm asking too frequently - I need to back off.");
  }
});

chrome.webRequest.onCompleted.addListener(function(v){
  if(_masterTabId&&v.tabId==_masterTabId&&v.frameId==0&&_masterFrameId){
    cleanMaster()
  }
  if((v.tabId==_ctrlTabId||v.tabId==-1)&&_masterTabId){
    if(!v.url.includes("bzInsert.css")&&!v.url.includes("insert.icons.css")){
      chrome.tabs.sendMessage(_masterTabId, {twUpdate:1,tab:"master"});
    }
    var r={ctrlInfo:1,url:v.url}
    if(v.statusCode>=400){
      r.failed=1;
      r.code=v.statusCode
    }
    if(v.type=="main_frame"||v.tabId==-1||(v.type=="sub_frame"&&v.frameId==_topFrameId)){
      if(_isDownloading(v.responseHeaders)){
        r.download=1
      }else{
        r.ready=1;//mainPage
        _lastErrPage=0
        if(_loadPageInfo){
          chrome.tabs.sendMessage(_masterTabId, _loadPageInfo);
        }
        setTimeout(function(){
          if(_loadPageInfo){
            chrome.tabs.sendMessage(_masterTabId, _loadPageInfo);
          }
        },1000)
        r.tab="master"
        _loadPageInfo=r;
        return
      }
    }else if(v.type=="other"){
      /*****************************
      * NOT SURE, NEED CHECK AGAIN!!!
      *****************************/
      r.download=1
    }else if(r.failed){
      r.extraFile=1;
      r.initUrl=v.initiator
    }else{
      return;
    }
    r.tab="master"
    chrome.tabs.sendMessage(_masterTabId, r)
  }
},{urls: ["<all_urls>"]},["responseHeaders"]);
function _isDownloading(rs){
  for(var i=0;rs && i<rs.length;i++){
    var r=rs[i];
    if(r.name=="Content-Disposition" && (r.value.includes("attachment")||r.value.includes("filename"))){
      return 1
    }else if(r.name=="content-type" && (r.value.includes("application")||r.value.includes("stream"))){
      return 1
    }
  }
}
chrome.webRequest.onErrorOccurred.addListener(function(v){
  if(v.tabId==_ctrlTabId||(_masterFrameId&&!_ctrlTabId)){
    var r={ctrlInfo:1,url:v.url,error:1};
    
    if(v.type=="main_frame"||(v.type=="sub_frame"&&((_masterFrameId&&!_ctrlTabId)||v.frameId==_topFrameId))){
      if(_isDownloading(v.responseHeaders)){
        r.download=1
      }else{
        r.ready=1
      }
      if(_lastErrPage && _lastErrPage.url==r.url && Date.now()-_lastErrPage.time<1000){
        return;
      }
      _lastErrPage={url:r.url,time:Date.now()}
    }else if(v.type=="other"){
      r.download=1
    }else{
      r.error=0
      r.extraFile=1;
      r.initUrl=v.initiator
    }
    r.tab="master"
    chrome.tabs.sendMessage(_masterTabId, r)
  }
},{urls: ["<all_urls>"]});

function cleanMaster(){
  _masterTabId=0;
  _masterFrameId=0;
  _shareData={}
  ignoreReqs=0
  _newStatus=_status=0
  _ctrlTabId=0;
}